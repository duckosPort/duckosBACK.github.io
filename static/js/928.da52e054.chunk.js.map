{"version":3,"file":"static/js/928.da52e054.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../node_modules/@emailjs/browser/es/index.js"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n"],"names":["EmailJSResponseStatus","_status","_text","this","status","text","store","origin","blockHeadless","storageProvider","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","createWebStorage","buildOptions","options","publicKey","toString","init","opts","blockList","limitRate","sendPost","url","data","headers","fetch","method","body","response","message","responseStatus","ok","validateParams","serviceID","templateID","validateTemplateParams","templateParams","isHeadless","navigator","webdriver","languages","length","headlessError","isBlockedValueInParams","params","list","watchVariable","isBlockListDisabled","Array","isArray","validateBlockListParams","name","FormData","includes","blockedEmailError","validateLimitRateParams","throttle","id","getLeftTime","storage","Number","lastTime","Date","now","isLimitRateHit","defaultID","limitRateError","send","reject","location","pathname","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","validateForm","form","nodeName","findHTMLForm","document","querySelector","sendForm","currentForm","formData","append"],"sourceRoot":""}